name: Build and Deploy Backend

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Grant execute permission for Gradle Wrapper
      run: chmod +x ./Backend/gradlew

    - name: Build with Gradle
      working-directory: ./Backend
      run: ./gradlew clean build -x test

    # ✅ 빌드 후 실제 생성된 파일 구조 확인용 (중요)
    - name: Check workspace contents
      run: |
        echo "Current directory: $(pwd)"
        echo "List all files recursively:"
        ls -R $GITHUB_WORKSPACE

    # ✅ JAR 파일 찾기 및 압축하기
    - name: Compress JAR
      run: |
        echo "🔍 Searching for JAR file..."
        JAR_PATH=$(find $GITHUB_WORKSPACE/Backend/build/libs -name "*.jar" ! -name "*-plain.jar" | head -n 1)
        echo "✅ Found JAR file: $JAR_PATH"
        if [ -z "$JAR_PATH" ]; then
          echo "❌ No JAR file found to compress"
          exit 1
        fi
        TAR_PATH="/tmp/app_${{ github.run_id }}.tar.gz"
        echo "📦 Compressing JAR into $TAR_PATH"
        tar -czf "$TAR_PATH" -C "$(dirname "$JAR_PATH")" "$(basename "$JAR_PATH")"
        echo "✅ Compression completed"

    # ✅ (선택) EC2 서버로 배포 단계 예시
    - name: Deploy to EC2
      if: success()
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ubuntu
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        scp -o StrictHostKeyChecking=no -i private_key.pem /tmp/app_${{ github.run_id }}.tar.gz $USER@$HOST:/home/ubuntu/app.tar.gz
        ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST "
          mkdir -p /home/ubuntu/app &&
          tar -xzf /home/ubuntu/app.tar.gz -C /home/ubuntu/app &&
          nohup java -jar /home/ubuntu/app/*.jar > /home/ubuntu/app/log.out 2>&1 &
        "
        echo "🚀 Deployment complete!"
